{"ast":null,"code":"var _jsxFileName = \"/home/alex/full stack developer lezioni/Developing Front End Apps with React/apps/m4/ejtos-react_budget_app/src/components/Remaining.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Remaining = () => {\n  _s();\n\n  const {\n    expenses,\n    budget\n  } = useContext(AppContext);\n  const totalExpenses = expenses.reduce((total, item) => {\n    return total = total + item.cost;\n  }, 0);\n  const alertType = totalExpenses > budget ? 'alert-danger' : 'alert-success';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `alert ${alertType}`,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Remaining: \\xA3\", budget - totalExpenses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Remaining, \"hlOo7VHyQ8CWQPyxAFhfQgkJnJw=\");\n\n_c = Remaining;\nexport default Remaining; //Here, you are using the reduce function to get a total of all the costs,\n//assigning this to a variable and displaying the variable in your JSX.\n//Now whenever the user adds an expense, this causes the state to update,\n//which will cause all components connected to the context to re-render and update themselves with new values.\n\nvar _c;\n\n$RefreshReg$(_c, \"Remaining\");","map":{"version":3,"names":["React","useContext","AppContext","Remaining","expenses","budget","totalExpenses","reduce","total","item","cost","alertType"],"sources":["/home/alex/full stack developer lezioni/Developing Front End Apps with React/apps/m4/ejtos-react_budget_app/src/components/Remaining.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nconst Remaining = () => {\n    const { expenses, budget } = useContext(AppContext);\n    const totalExpenses = expenses.reduce((total, item) => {\n        return (total = total + item.cost);\n    }, 0);\n    const alertType = totalExpenses > budget ? 'alert-danger' : 'alert-success';\n    return (\n        <div className={`alert ${alertType}`}>\n            <span>Remaining: Â£{budget - totalExpenses}</span>\n        </div>\n    );\n};\nexport default Remaining;\n\n//Here, you are using the reduce function to get a total of all the costs,\n //assigning this to a variable and displaying the variable in your JSX.\n//Now whenever the user adds an expense, this causes the state to update,\n //which will cause all components connected to the context to re-render and update themselves with new values."],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,uBAA3B;;;AACA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM;IAAEC,QAAF;IAAYC;EAAZ,IAAuBJ,UAAU,CAACC,UAAD,CAAvC;EACA,MAAMI,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAgB,CAACC,KAAD,EAAQC,IAAR,KAAiB;IACnD,OAAQD,KAAK,GAAGA,KAAK,GAAGC,IAAI,CAACC,IAA7B;EACH,CAFqB,EAEnB,CAFmB,CAAtB;EAGA,MAAMC,SAAS,GAAGL,aAAa,GAAGD,MAAhB,GAAyB,cAAzB,GAA0C,eAA5D;EACA,oBACI;IAAK,SAAS,EAAG,SAAQM,SAAU,EAAnC;IAAA,uBACI;MAAA,8BAAmBN,MAAM,GAAGC,aAA5B;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAXD;;GAAMH,S;;KAAAA,S;AAYN,eAAeA,SAAf,C,CAEA;AACC;AACD;AACC"},"metadata":{},"sourceType":"module"}