{"ast":null,"code":"var _jsxFileName = \"/home/alex/full stack developer lezioni/Developing Front End Apps with React/apps/m4/ejtos-react_budget_app/src/components/Budget.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Budget = () => {\n  _s();\n\n  const {\n    dispatch,\n    remaining,\n    currency\n  } = useContext(AppContext);\n  const {\n    budget\n  } = useContext(AppContext);\n  const [newBudget, setNewBudget] = useState(budget);\n  const upperLimitValue = 20000;\n\n  const handleBudgetChange = e => {\n    setNewBudget(e.target.value);\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && newBudget <= upperLimitValue) {\n      dispatch({\n        type: \"SET_BUDGET\",\n        payload: newBudget\n      });\n    } else if (newBudget > upperLimitValue) {\n      alert(\"The value cannot exceed remaining funds  £\" + remaining);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alert alert-secondary \",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Budget: \", currency]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"w-50 ms-1\",\n      required: true,\n      type: \"number\",\n      id: \"cost\",\n      step: 10,\n      value: newBudget,\n      onChange: handleBudgetChange,\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Budget, \"EGFHqfDHNLhfiJg7Oi37EMKb4Mc=\");\n\n_c = Budget;\nexport default Budget; //In Budget.js you will be adding text and value for your budget. \n//You will be importing app context and the useContext hook, \n//and pass your AppContext to it - this is how a component connects to the context in order to get values from global state.\n//In the above code snippet we are using the useState hook to create a state variable called newBudget and initialize it with the current value of budget.\n//We are also defining a function called handleBudgetChange that updates the value of newBudget when the user changes the value of the input field.\n//We are then setting the value attribute of the input field to newBudget and adding an onChange event listener that calls handleBudgetChange \n//when the user changes the value of the input field.\n//Here, you are using the Bootstrap Alert classes to give a nice gray background by adding some text and hard coding a value.\n\nvar _c;\n\n$RefreshReg$(_c, \"Budget\");","map":{"version":3,"names":["React","useContext","useState","AppContext","Budget","dispatch","remaining","currency","budget","newBudget","setNewBudget","upperLimitValue","handleBudgetChange","e","target","value","handleKeyDown","key","type","payload","alert"],"sources":["/home/alex/full stack developer lezioni/Developing Front End Apps with React/apps/m4/ejtos-react_budget_app/src/components/Budget.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { AppContext  } from '../context/AppContext';\n\nconst Budget = () => {\n    const { dispatch, remaining ,currency} = useContext(AppContext);\n    const { budget } = useContext(AppContext);\n    const [newBudget, setNewBudget] = useState(budget);\n    const upperLimitValue = 20000\n\n    const handleBudgetChange = (e) => {\n        setNewBudget(e.target.value);\n    }\n    const handleKeyDown = (e) => {\n        if ( e.key === 'Enter' && newBudget <= upperLimitValue) {\n          dispatch({ type: \"SET_BUDGET\", payload: newBudget });\n        }else if (newBudget > upperLimitValue) {\n            alert(\"The value cannot exceed remaining funds  £\"+remaining);   \n        }\n      };\n      \n\n    return (\n        <div className=\"alert alert-secondary \">\n            <label>Budget: {currency}</label>\n            <input\n                className='w-50 ms-1'\n                required\n                type=\"number\"\n                id=\"cost\"\n                step={10}\n                value={newBudget}\n                onChange={handleBudgetChange}\n                onKeyDown={handleKeyDown}\n            />\n    </div>\n\n    );\n};\nexport default Budget;\n\n//In Budget.js you will be adding text and value for your budget. \n//You will be importing app context and the useContext hook, \n//and pass your AppContext to it - this is how a component connects to the context in order to get values from global state.\n\n//In the above code snippet we are using the useState hook to create a state variable called newBudget and initialize it with the current value of budget.\n //We are also defining a function called handleBudgetChange that updates the value of newBudget when the user changes the value of the input field.\n//We are then setting the value attribute of the input field to newBudget and adding an onChange event listener that calls handleBudgetChange \n//when the user changes the value of the input field.\n//Here, you are using the Bootstrap Alert classes to give a nice gray background by adding some text and hard coding a value."],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA4B,uBAA5B;;;AAEA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACjB,MAAM;IAAEC,QAAF;IAAYC,SAAZ;IAAuBC;EAAvB,IAAmCN,UAAU,CAACE,UAAD,CAAnD;EACA,MAAM;IAAEK;EAAF,IAAaP,UAAU,CAACE,UAAD,CAA7B;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAACM,MAAD,CAA1C;EACA,MAAMG,eAAe,GAAG,KAAxB;;EAEA,MAAMC,kBAAkB,GAAIC,CAAD,IAAO;IAC9BH,YAAY,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;EACH,CAFD;;EAGA,MAAMC,aAAa,GAAIH,CAAD,IAAO;IACzB,IAAKA,CAAC,CAACI,GAAF,KAAU,OAAV,IAAqBR,SAAS,IAAIE,eAAvC,EAAwD;MACtDN,QAAQ,CAAC;QAAEa,IAAI,EAAE,YAAR;QAAsBC,OAAO,EAAEV;MAA/B,CAAD,CAAR;IACD,CAFD,MAEM,IAAIA,SAAS,GAAGE,eAAhB,EAAiC;MACnCS,KAAK,CAAC,+CAA6Cd,SAA9C,CAAL;IACH;EACF,CANH;;EASA,oBACI;IAAK,SAAS,EAAC,wBAAf;IAAA,wBACI;MAAA,uBAAgBC,QAAhB;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MACI,SAAS,EAAC,WADd;MAEI,QAAQ,MAFZ;MAGI,IAAI,EAAC,QAHT;MAII,EAAE,EAAC,MAJP;MAKI,IAAI,EAAE,EALV;MAMI,KAAK,EAAEE,SANX;MAOI,QAAQ,EAAEG,kBAPd;MAQI,SAAS,EAAEI;IARf;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH,CAlCD;;GAAMZ,M;;KAAAA,M;AAmCN,eAAeA,MAAf,C,CAEA;AACA;AACA;AAEA;AACC;AACD;AACA;AACA"},"metadata":{},"sourceType":"module"}