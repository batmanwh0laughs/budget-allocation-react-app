{"ast":null,"code":"var _jsxFileName = \"/home/alex/full stack developer lezioni/Developing Front End Apps with React/apps/m4/ejtos-react_budget_app/src/components/ExpenseTotal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseTotal = () => {\n  _s();\n\n  const {\n    expenses,\n    currency\n  } = useContext(AppContext);\n  const totalExpenses = expenses.reduce((total, item) => {\n    return total += item.cost;\n  }, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alert alert-primary\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Spent so far: \", Currency, totalExpenses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseTotal, \"kkM8eQTUL3dot9rUR96M8cUletg=\");\n\n_c = ExpenseTotal;\nexport default ExpenseTotal; //Here, you are using the reduce function to get a total of all the costs, \n//assigning this to a variable and displaying the variable in your JSX.\n//Now whenever the user adds an expense,\n//this causes the state to update, \n//which will cause all components connected to the context to re-render and update themselves with new values.\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseTotal\");","map":{"version":3,"names":["React","useContext","AppContext","ExpenseTotal","expenses","currency","totalExpenses","reduce","total","item","cost","Currency"],"sources":["/home/alex/full stack developer lezioni/Developing Front End Apps with React/apps/m4/ejtos-react_budget_app/src/components/ExpenseTotal.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nconst ExpenseTotal = () => {\n    const { expenses, currency} = useContext(AppContext);\n    const totalExpenses = expenses.reduce((total, item) => {\n        return (total += item.cost);\n    }, 0);\n    return (\n        <div className='alert alert-primary'>\n            <span>Spent so far: {Currency}{totalExpenses}</span>\n        </div>\n    );\n};\nexport default ExpenseTotal;\n\n//Here, you are using the reduce function to get a total of all the costs, \n//assigning this to a variable and displaying the variable in your JSX.\n//Now whenever the user adds an expense,\n //this causes the state to update, \n //which will cause all components connected to the context to re-render and update themselves with new values."],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,uBAA3B;;;AACA,MAAMC,YAAY,GAAG,MAAM;EAAA;;EACvB,MAAM;IAAEC,QAAF;IAAYC;EAAZ,IAAwBJ,UAAU,CAACC,UAAD,CAAxC;EACA,MAAMI,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAgB,CAACC,KAAD,EAAQC,IAAR,KAAiB;IACnD,OAAQD,KAAK,IAAIC,IAAI,CAACC,IAAtB;EACH,CAFqB,EAEnB,CAFmB,CAAtB;EAGA,oBACI;IAAK,SAAS,EAAC,qBAAf;IAAA,uBACI;MAAA,6BAAqBC,QAArB,EAA+BL,aAA/B;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAVD;;GAAMH,Y;;KAAAA,Y;AAWN,eAAeA,YAAf,C,CAEA;AACA;AACA;AACC;AACA"},"metadata":{},"sourceType":"module"}